<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>给Hexo加个后台 - Qexo</title>
      <link href="/posts/da27.html"/>
      <url>/posts/da27.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>参考：<a href="https://www.oplog.cn/qexo/start.html">https://www.oplog.cn/qexo/start.html</a></strong></p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Qexo-orange?logo=GitHub&color=orange&link=https://github.com/Qexo/Qexo&"></object><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>Qexo是一个快速、强大、漂亮的在线 Hexo 编辑器，支持在线<code>新建编辑文章</code> <code>新建编辑单独页面</code> <code>友情链接</code> 还支持<code>页面管理</code> <code>自定义图床</code>等功能。</p><p><img src="https://user-images.githubusercontent.com/51912589/159258766-19a1ce22-d34b-4b29-b291-7d70e8942859.png" alt="wd"></p><h2 id="特色功能"><a href="#特色功能" class="headerlink" title="特色功能"></a>特色功能</h2><ul><li>自定义图床上传图片</li><li>在线配置编辑</li><li>在线页面管理</li><li>开放 API</li><li>自动检查更新</li><li>在线一键更新</li><li>快速接入友情链接</li><li>简单的说说短文</li><li>类似不算子的统计</li><li>自动填文章模板</li></ul><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="申请-MongoDB"><a href="#申请-MongoDB" class="headerlink" title="申请 MongoDB"></a>申请 MongoDB</h2><p>1.<a href="https://www.mongodb.com/cloud/atlas/register">注册 MongoDB 账号</a>，然后登陆。</p><p>2.新建 MongoDB 数据库：</p><p><code>Build a Database</code>—&gt;<code>Create(Free)</code>—&gt;<code>Create Cluster[地区选择**AWS / N. Virginia (us-east-1)**]</code>—&gt;配置数据库：添加用户、允许所有IP访问(0.0.0.0/0)—&gt;<code>Finsh and Close</code></p><details class="folding-tag" yellow><summary> 图片教程 </summary>              <div class='content'>              <p><img src="https://pic.daiyu-233.top/img/posts/Qexo/1.png" alt="1" style="zoom: 25%;" /></p><p><img src="https://pic.daiyu-233.top/img/posts/Qexo/2.png" alt="2" style="zoom:25%;" /></p><p><img src="https://pic.daiyu-233.top/img/posts/Qexo/3.png" alt="3" style="zoom:25%;" /></p><p><img src="https://pic.daiyu-233.top/img/posts/Qexo/4.png" alt="4" style="zoom:25%;" /></p>              </div>            </details><h2 id="数据库连接信息"><a href="#数据库连接信息" class="headerlink" title="数据库连接信息"></a>数据库连接信息</h2><p>在<code>Databas</code>页面点击<code>Connect--&gt;Connect with the MonggoDB Shell</code></p><p><img src="https://pic.daiyu-233.top/img/posts/Qexo/5.png" alt="5"></p><h2 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h2><p><a href="https://vercel.com/new/clone?repository-url=https://github.com/am-abudu/Qexo">https://vercel.com/new/clone?repository-url=https://github.com/am-abudu/Qexo</a></p><p>首次部署会报错，请无视并重新进入项目，在项目设置界面添加环境变量：</p><p>到<a href="https://vercel.com/dashboard">Dashboard – Vercel</a>找到刚刚部署的项目点击进入，进入<code>Setting</code>—&gt;<code>Environment Variables</code>添加环境变量</p><p><img src="https://pic.daiyu-233.top/img/posts/Qexo/6.png" alt="6"></p><div class="table-container"><table><thead><tr><th style="text-align:left">名称(Key)</th><th>示例(Value)</th><th>意义</th></tr></thead><tbody><tr><td style="text-align:left">MONGODB_HOST</td><td>mongodb+srv://cluster0.xxxx.mongodb.net</td><td>MongoDB 数据库连接地址</td></tr><tr><td style="text-align:left">MONGODB_PORT</td><td>27017</td><td>MongoDB 数据库通信端口 默认应填写 27017</td></tr><tr><td style="text-align:left">MONGODB_USER</td><td>abudu</td><td>MongoDB 数据库用户名</td></tr><tr><td style="text-align:left">MONGODB_DB</td><td>Cluster0</td><td>MongoDB 数据库名</td></tr><tr><td style="text-align:left">MONGODB_PASS</td><td>JWo0xxxxxxxx</td><td>MongoDB 数据库密码</td></tr></tbody></table></div><p>在 Deployments 点击 Redeploy 开始部署</p><p><img src="https://pic.daiyu-233.top/img/posts/Qexo/7.png" alt="7"></p><p>若没有 Error 信息即可打开域名进入初始化引导，国内可能无法使用默认域名进入，我们要解析一个自己的域名：</p><p>进入<code>Project</code>—&gt;<code>View Domains</code>，输入待解析的域名点击<code>Add</code>，按要求添加解析记录然后刷新</p><p><img src="https://pic.daiyu-233.top/img/posts/Qexo/8.png" alt="10"></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="Github-Gitlab-仓库"><a href="#Github-Gitlab-仓库" class="headerlink" title="Github/Gitlab 仓库"></a>Github/Gitlab 仓库</h2><p>您 Hexo <strong>自动化部署</strong>所在的仓库(不是xxxx.github.io)</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username/repo</span><br></pre></td></tr></table></figure><h2 id="项目分支"><a href="#项目分支" class="headerlink" title="项目分支"></a>项目分支</h2><p>您 Hexo 自动化部署所在仓库的分支</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main</span><br></pre></td></tr></table></figure><h2 id="Github-Gitlab-密钥-Toke"><a href="#Github-Gitlab-密钥-Toke" class="headerlink" title="Github/Gitlab 密钥(Toke)"></a>Github/Gitlab 密钥(Toke)</h2><p>于 <a href="https://github.com/settings/tokens">Github 设置</a> / <a href="https://gitlab.com/-/profile/personal_access_tokens">Gitlab 设置</a> 生成的 Token 需要 Repo 下的至少读取和写入权限不建议给出所有权限</p><p><code>GitHub Settings（右上角头像）</code>—&gt;<code>Developer settings</code>—&gt;<code>Personal access tokens</code>—&gt;<code>Tokens(classic)</code>：</p><h2 id="仓库路径"><a href="#仓库路径" class="headerlink" title="仓库路径"></a>仓库路径</h2><p>您 Hexo 自动化部署所在仓库的路径 若为根目录请留空</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path/</span><br></pre></td></tr></table></figure><h2 id="VERCEL-TOKEN"><a href="#VERCEL-TOKEN" class="headerlink" title="VERCEL_TOKEN"></a>VERCEL_TOKEN</h2><p>您的 Vercel 账户密钥 在 <a href="https://vercel.com/account/tokens">此处</a> 生成</p><h2 id="PROJECT-ID"><a href="#PROJECT-ID" class="headerlink" title="PROJECT_ID"></a>PROJECT_ID</h2><p>您 Qexo 部署所在项目的 ID 位于 <code>Project Settings</code> —&gt; <code>General</code> —&gt; <code>Project ID</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prj_xxxxxxx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Butterfly 搭建个人博客</title>
      <link href="/posts/87a2.html"/>
      <url>/posts/87a2.html</url>
      
        <content type="html"><![CDATA[<p><strong><span class='p center small'>------ 使用 Github Pages 和 Hexo 搭建个人博客 ------</span></strong></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note info no-icon flat"><p>Github </p></div><p><a href="https://github.com/">Github</a>是一个面向开源及私有软件项目托管平台，因为之支持Git作为唯一的版本库格式进行托管，故名Github。</p><div class="note info no-icon flat"><p>Github Pages </p></div><p><a href="https://pages.github.com/">Github Pages</a> 是在 github 上的静态网页托管平台，使用 Github Pages 可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。</p><div class="note info no-icon flat"><p>Hexo </p></div><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架，Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用指定的主题生成静态网页。</p><h2 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h2><details class="folding-tag" cyan><summary> 安装node.js </summary>              <div class='content'>              <p><a href="https://nodejs.org/en/download/">Node.js 官网</a></p><p>选择对应的版本下载</p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1.png" alt="1"></p><p>一直下一步就好了</p>              </div>            </details><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><details class="folding-tag" cyan><summary> 安装Git </summary>              <div class='content'>              <p><a href="https://git-scm.com/downloads">Git 官网</a></p><p>下载好自己对应的版本后一直下一步就好了</p><p>安装成功后右键菜单会出现选项</p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2.png" alt="2"></p>              </div>            </details><h2 id="检验软件是否安装成功"><a href="#检验软件是否安装成功" class="headerlink" title="检验软件是否安装成功"></a>检验软件是否安装成功</h2><p>同时按下 <kbd>Win</kbd> 和 <kbd>R</kbd>打开运行，输入 <code>cmd</code>，然后输入以下命令，有相应版本信息显示则安装成功，若不正确可以卸载软件重新安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/3.png" alt="3"></p><h2 id="npm-源"><a href="#npm-源" class="headerlink" title="npm 源"></a>npm 源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#淘宝镜像源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure><h1 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h1><h2 id="安装-Hexo-脚手架"><a href="#安装-Hexo-脚手架" class="headerlink" title="安装 Hexo 脚手架"></a>安装 Hexo 脚手架</h2><p>新建一个文件夹，起一个好记的名字（以下简称<code>[Blogroot]</code>），在文件夹下右键菜单点击<code>Git Bash Here</code>，输入以下命令安装 hexo 的脚手架（第一次可能会比较久）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4.png" alt="4"></p><h2 id="初始化-Hexo"><a href="#初始化-Hexo" class="headerlink" title="初始化 Hexo"></a>初始化 Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>如果出错了就再试一次</p><p>Hexo 安装完成后，将会在指定文件夹中新建所需要的文件，Hexo 文件夹下的目录如下：</p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/5.png" alt="6"></p><h2 id="本地查看"><a href="#本地查看" class="headerlink" title="本地查看"></a>本地查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br><span class="line"></span><br><span class="line">//按下ctrl + C来关闭进程</span><br></pre></td></tr></table></figure><p>执行完即可打开 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看效果</p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/6.png" alt="image-20221128151017830" style="zoom: 80%;" /></p><h1 id="将博客部署到-Github-Pages"><a href="#将博客部署到-Github-Pages" class="headerlink" title="将博客部署到 Github Pages"></a>将博客部署到 Github Pages</h1><p>到目前为止，我们的本地博客就成功搭建了，但是现在我们只能通过本地连接查看（当然也可以通过公网访问）。我们要做的是让其他人也能够访问我们的博客，这就需要我们将博客部署到 Github Pages 上。</p><details class="folding-tag" cyan><summary> 前置步骤 </summary>              <div class='content'>              <p>一、注册 Github 账户：访问 <a href="https://github.com/">Github 官网</a>，点击 Sign Up 注册账户</p><p>二、创建项目代码库：点击 New repository 开始创建</p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/7.png" alt="7"  /></p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/8.png" alt="8"></p><p>三、配置 <code>SSH</code> 密钥：只有配置好 <code>SSH</code> 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步。在<code>[Blogroot]</code>内打开终端(<code>Git Bash Here</code>)，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span></span><br><span class="line">//引号里面填写你的邮箱地址，比如12345678@qq.com</span><br></pre></td></tr></table></figure><p>基本上一路回车就好了</p><p>接下来屏幕会显示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/you/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/you/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">这里是各种字母数字组成的字符串，结尾是你的邮箱</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">这里也是各种字母数字符号组成的字符串</span></span><br></pre></td></tr></table></figure><p>运行以下命令，将公钥的内容复制到系统粘贴板上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>四、在 GitHub 账户中添加你的公钥</p><p>1.登陆 GitHub，进入 <code>Settings</code>：</p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/9.png" alt="9"></p><p>2.点击 <code>SSH and GPG Keys</code>，选择<code>New SSH key</code></p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/10.png" alt="10"></p><p>3.粘贴密钥：</p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/11.png" alt="11"></p><p>五、配置 Git 个人信息</p><p>Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成你自己的，名字可以不是 GitHub 的昵称，但为了方便记忆，建议与 GitHub 一致</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;此处填你的用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;此处填你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>到此为止 SSH Key 配置成功，本机已成功连接到 Github</p>              </div>            </details><details class="folding-tag" cyan><summary> 将本地的Hexo文件更新到Github的库中 </summary>              <div class='content'>              <p>一、登录 Github 打开自己的项目（你的用户名.github.io）</p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/12.png" alt="12"></p><p>二、复制 SSH</p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/13.png" alt="13"></p><p>三、右键用记事本（或者其他编辑器）打开 <code>[Blogroot]/_config.yml</code> </p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/14.png" alt="14"></p><p>四、滑到最下面,按下图修改 <code>_config.yml</code> 文件并保存</p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/15.png" alt="15"></p><p>五、执行以下命令，把博客部署到 Github 上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo cl //清除缓存</span><br><span class="line">hexo g  //生成静态文件</span><br><span class="line">hexo d  //部署到服务端</span><br><span class="line"></span><br><span class="line">//或者直接执行:</span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line"></span><br><span class="line">//此外 <span class="string">&quot;hexo s&quot;</span> 是本地运行</span><br></pre></td></tr></table></figure><p>执行完之后会让你输入你的 Github 的账号和密码，如果此时报错(<code>ERROR Deployer not found: git</code>)，说明你的 deployer 没有安装成功</p><p>需要执行以下命令再安装一次：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>再执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>你的博客就会部署到 Github 上了</p><p>访问：<code>https://你的用户名.github.io</code>   比如（<a href="https://daiyu-233.github.io/）">https://daiyu-233.github.io/）</a><br>以后每个人都可以通过此链接访问你的博客了</p>              </div>            </details><h1 id="切换Butterfly主题"><a href="#切换Butterfly主题" class="headerlink" title="切换Butterfly主题"></a>切换Butterfly主题</h1><h2 id="安装Butterfly主题"><a href="#安装Butterfly主题" class="headerlink" title="安装Butterfly主题"></a>安装Butterfly主题</h2><p>在<code>[Blogroot]</code>运行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h2 id="新建配置文件"><a href="#新建配置文件" class="headerlink" title="新建配置文件"></a>新建配置文件</h2><p>新建<code>[Blogroot]/_config.butterfly.yml</code>，复制<code>[Blogroot]/themes/butterfly/_config.yml</code>的内容，粘贴到<code>[Blogroot]/_config.butterfly.yml</code>，这样两个文件的内容就一样了。<br>（如果同时存在<code>[Blogroot]/themes/butterfly/_config.yml</code>和<code>[Blogroot]/_config.butterfly.yml</code>，Hexo会优先使用<code>[Blogroot]/_config.butterfly.yml</code>）</p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16.png" alt="25"></p><h2 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h2><p>修改 <code>[Blogroot]/_config.yml</code>，把主题改为butterfly（大概在第100行）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><h1 id="Github-Action-自动部署"><a href="#Github-Action-自动部署" class="headerlink" title="Github Action 自动部署"></a>Github Action 自动部署</h1><h2 id="Github-Action-简介"><a href="#Github-Action-简介" class="headerlink" title="Github Action 简介"></a>Github Action 简介</h2><p>Github Action 是 GitHub 于 2018 年 10 月推出的一个 CI\CD 服务。</p><p>每次部署 <code>Hexo</code> 都需要运行指令三件套，随着文章越来越多，编译的时间也随之越来越长，通过 <code>Github Action</code>，我们只需要在每次完成博客的编写或修改以后，将改动直接 <code>push</code> 到远程仓库，之后的编译部署的工作统统交给 <code>CI</code> 来完成即可。</p><h2 id="Github-Action-使用教程"><a href="#Github-Action-使用教程" class="headerlink" title="Github Action 使用教程"></a>Github Action 使用教程</h2><p>Github-&gt;头像（右上角）-&gt;Settings-&gt;Developer Settings-&gt;Personal access tokens-&gt;<code>tokens (classic)</code>-&gt;<code>generate new token</code>，然后输入你的账号密码。</p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/17.png" alt="16"></p><p>创建的 Token 名称随意，但必须勾选 repo 项 和 workflows 项。</p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/18.png" alt="18"></p><div class="tip warning"><p>token 只会显示这一次，之后将无法查看，所以务必保证你已经记录下了 Token。之后如果忘记了就只能重新生成重新配置。</p></div><h2 id="创建源码私有仓库"><a href="#创建源码私有仓库" class="headerlink" title="创建源码私有仓库"></a>创建源码私有仓库</h2><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/19.png" alt="19"></p><p>这里之所以是私有仓库，是因为在接下来的配置中会用到 <code>Token</code>，如果 <code>Token</code> 被盗用，别人可以肆意操作你的 github 仓库内容，为了避免这一风险，才选择的博客源码闭源。</p><p>创建完成后，需要把博客的源码 push 到这里。首先获取远程仓库地址，此处 SSH 和 HTTPS 都可以。前面我们绑定了ssh key，SSH 在绑定过 ssh key 的设备上无需再输入密码，HTTPS 则需要输入密码，但是 SSH 偶尔会遇到端口占用的情况，请自主选择。</p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20.png" alt="20"></p><ol><li>新建<code>[Blogroot(博客根目录)]/.github/workflows/autodeploy.yml</code> 里面输入</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;16.x&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cache-npm</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v3</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">cache-name:</span> <span class="string">cache-node-modules</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-build-</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.cache-npm.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install gulp-cli -g #全局安装gulp</span></span><br><span class="line"><span class="string">          npm install --save</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo generate</span></span><br><span class="line"><span class="string">          gulp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署到Github</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">token:</span> <span class="comment">#token(刚刚复制到的token)</span></span><br><span class="line">          <span class="attr">repository-name:</span> <span class="comment">#仓库名称(用来部署Github Pages的仓库的路径，如：&#x27;DaiYu-233/DaiYu-233.github.io&#x27;)</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">folder:</span> <span class="string">public</span></span><br><span class="line">          <span class="attr">commit-message:</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.head_commit.message &#125;&#125;</span> Updated By Github Actions&quot;</span></span><br></pre></td></tr></table></figure><p>把以上的<code>token</code>和<code>repository-name</code>改为你的token和仓库名称</p><p>可以直接在仓库中复制：</p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/21.png" alt="22"></p><p>这里跪求大家点个<a href="https://github.com/DaiYu-233/DaiYu-233.github.io">star</a>ヾ(•ω•`)o</p><h2 id="设置远程仓库和分支"><a href="#设置远程仓库和分支" class="headerlink" title="设置远程仓库和分支"></a>设置远程仓库和分支</h2><p>1.先把<code>[Blogroot]/themes/butterfly/.git</code>（这是一个隐藏文件夹）删除或者移动到非博客文件夹目录下,原因是主题文件夹下的<code>.git</code>文件夹的存在会导致其被识别成子项目，从而无法被上传到源码仓库。</p><p>2.在<code>[Blogroot]</code>运行指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment">#初始化</span></span><br><span class="line">git remote add origin [刚刚新建的“hexo”仓库的ssh] <span class="comment">#如：我的ssh是“git@github.com:DaiYu-1/DaiYu-1.github.io.git”，那么完整代码就是“git remote add origin git@github.com:DaiYu-1/DaiYu-1.github.io.git”</span></span><br><span class="line">git checkout -b main <span class="comment"># 切换到main分支</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.添加屏蔽项</p><p>打开<code>[Blogroot]/.gitignore</code>，替换以下内容：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">.deploy_git*/</span><br><span class="line">.idea</span><br><span class="line">themes/butterfly/.git</span><br></pre></td></tr></table></figure><p>4.再运行 git 提交指令，将博客源码提交到 github 上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;github action update&quot;</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><h2 id="查看部署情况"><a href="#查看部署情况" class="headerlink" title="查看部署情况"></a>查看部署情况</h2><p>此时，打开 GIthub 存放源码的私有仓库，找到 action。</p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/22.png" alt="23"></p><p>等待转圈变成绿色对勾表示部署成功<br>红色叉叉则表示报错了</p><p>此时你就可以体验到 vs code 源代码管理的快感了</p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/23.png" alt="24"></p><p><strong><span class='p center small'>------ Butterfly装载指南 ------</span></strong></p><h1 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h1><p>修改<code>[Blogroot]/_config.yml</code></p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/24.png" alt="26"  /></p><h1 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h1><p>修改<code>[Blogroot]/_config.butterfly.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line"><span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line"><span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line"><span class="attr">Categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line"><span class="string">List||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">  <span class="attr">Music:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">  <span class="attr">Movie:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line"><span class="attr">Link:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line"><span class="attr">About:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p><code>||</code>前面是跳转链接,后面是图标，如果不希望显示图标，图标名可不写。<br>在移动端等界面默认子目录是展开的，如果你想要隐藏，在子目录里添加 <code>hide</code> ，如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">List||fas</span> <span class="string">fa-list||hide:</span></span><br><span class="line">  <span class="attr">Music:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">  <span class="attr">Movie:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br></pre></td></tr></table></figure><p>注意： 导航的文字、链接、图标都可自行更改，如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">时间轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">清单||fa</span> <span class="attr">fa-heartbeat:</span></span><br><span class="line">    <span class="string">音乐:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="string">照片:</span> <span class="string">/Gallery/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-images</span></span><br><span class="line">    <span class="string">电影:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/25.png" alt="27"></p><h1 id="文章链接转义字母数字"><a href="#文章链接转义字母数字" class="headerlink" title="文章链接转义字母数字"></a>文章链接转义字母数字</h1><p>参考: <a href="https://github.com/rozbo/hexo-abbrlink">https://github.com/rozbo/hexo-abbrlink</a></p><p>安装插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>修改<code>_config.yml</code> </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    # URL</span><br><span class="line">    ## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">    url: http://example.com</span><br><span class="line"><span class="deletion">-   permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="addition">+   permalink: posts/:abbrlink.html</span></span><br><span class="line">    permalink_defaults:</span><br></pre></td></tr></table></figure><p>在<code>_config.yml</code>插入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>      <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>        <span class="comment">#support dec(default) and hex</span></span><br></pre></td></tr></table></figure><h1 id="本地搜索依赖"><a href="#本地搜索依赖" class="headerlink" title="本地搜索依赖"></a>本地搜索依赖</h1><p>参考：<a href="https://github.com/wzpan/hexo-generator-search">https://github.com/wzpan/hexo-generator-search</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>在<code>_config.yml</code>插入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>修改<code>_config.butterfly.yml</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line"><span class="deletion">-  enable: false</span></span><br><span class="line"><span class="addition">+  enable: true</span></span><br><span class="line">   preload: false  //预加载需要的改成true</span><br><span class="line">  CDN:</span><br></pre></td></tr></table></figure><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/26.png" alt="28"></p><h1 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h1><p>修改<code>_config.butterfly.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/xxxxx</span> <span class="string">||</span> <span class="string">Github</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">mailto:xxxxxx@gmail.com</span> <span class="string">||</span> <span class="string">Email</span></span><br></pre></td></tr></table></figure><p>格式： <code>图标名：url || 描述性文字</code></p><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/27.png" alt="29"><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/28.png" alt="30"></p><h1 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h1><p>修改<code>_config.butterfly.yml</code></p><h2 id="代码高亮主题"><a href="#代码高亮主题" class="headerlink" title="代码高亮主题"></a>代码高亮主题</h2><p>utterfly 支持6种代码高亮样式：</p><ul><li><a href="https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-code-darker.png">darker</a></li><li><a href="https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-code-pale-night.png">pale night</a></li><li><a href="https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-code-light.png">light</a></li><li><a href="https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-highlight-ocean.png">ocean</a></li><li><a href="https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-highlight-mac.png">mac</a></li><li><a href="">mac light</a></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">light</span></span><br></pre></td></tr></table></figure><h2 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.daiyu-233.top/img/posts/Hexo-Butterfly%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/29.png" alt="31"></p><h2 id="代码框展开-关闭"><a href="#代码框展开-关闭" class="headerlink" title="代码框展开/关闭"></a>代码框展开/关闭</h2><p>在默认情况下，代码框自动展开，可设置是否所有代码框都关闭状态，点击<code>&gt;</code>可展开代码</p><ul><li>true 全部代码框不展开，需点击<code>&gt;</code>打开</li><li>false 代码框展开，有<code>&gt;</code>点击按钮</li><li>none 不显示<code>&gt;</code>按钮</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">true</span> <span class="comment">#代码框不展开，需点击 &#x27;&gt;&#x27; 打开</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-highlight-shrink-true.png">highlight_shrink: true</a></li><li><a href="https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-highlight-shrink-false.png">highlight_shrink: false</a></li><li><a href="https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-docs-highlight-shirk-none.png">highlight_shrink: none</a></li></ul><h2 id="代码换行"><a href="#代码换行" class="headerlink" title="代码换行"></a>代码换行</h2><p>在默认情况下，Hexo 在编译的时候不会实现代码自动换行。如果你不希望在代码块的区域里有横向滚动条的话，那么你可以考虑开启这个功能。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="live2d"><a href="#live2d" class="headerlink" title="live2d"></a>live2d</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装live2d</span></span><br><span class="line">npm install --save hexo-helper-live2d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装模型</span></span><br><span class="line">npm install --save live2d-widget-model-koharu</span><br></pre></td></tr></table></figure><h1 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save-dev</span><br></pre></td></tr></table></figure><h1 id="Rss"><a href="#Rss" class="headerlink" title="Rss"></a>Rss</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><h1 id="Bilibili追番插件"><a href="#Bilibili追番插件" class="headerlink" title="Bilibili追番插件"></a>Bilibili追番插件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-bilibili-bangumi --save</span><br></pre></td></tr></table></figure><h1 id="百度主动推送"><a href="#百度主动推送" class="headerlink" title="百度主动推送"></a>百度主动推送</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><h1 id="外挂标签"><a href="#外挂标签" class="headerlink" title="外挂标签"></a>外挂标签</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-tag-plugins-plus --save    <span class="comment">#安装插件</span></span><br><span class="line"></span><br><span class="line">npm uninstall hexo-renderer-marked --save    <span class="comment">#卸载hexo自带的渲染器</span></span><br><span class="line">npm install hexo-renderer-kramed --save      <span class="comment">#安装新的渲染器</span></span><br></pre></td></tr></table></figure><p>添加配置信息，在<code>_config.butterfly.yml</code>插入代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tag-plugins-plus</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/615e2dec/</span></span><br><span class="line"><span class="attr">tag_plugins:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">issues:</span> <span class="literal">false</span> <span class="comment">#issues标签依赖注入开关</span></span><br><span class="line">  <span class="attr">link:</span></span><br><span class="line">    <span class="attr">placeholder:</span> <span class="string">/img/link.png</span> <span class="comment">#link_card标签默认的图标图片</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br><span class="line">    <span class="attr">anima:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/font-awesome-animation.min.css</span> <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">    <span class="attr">jquery:</span> <span class="string">https://npm.elemecdn.com/jquery@latest/dist/jquery.min.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">issues:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/issues.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">iconfont:</span> <span class="string">//at.alicdn.com/t/font_2032782_8d5kxvn09md.js</span> <span class="comment">#参看https://akilar.top/posts/d2ebecef/</span></span><br><span class="line">    <span class="attr">carousel:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/carousel-touch.js</span></span><br><span class="line">    <span class="attr">tag_plugins_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/tag_plugins.css</span></span><br></pre></td></tr></table></figure><p>外挂标签的写法可以参考店长的博文：<a href="https://akilar.top/posts/615e2dec/">Tag Plugins Plus | Akilarの糖果屋</a></p><h1 id="右下角按钮"><a href="#右下角按钮" class="headerlink" title="右下角按钮"></a>右下角按钮</h1><p>修改<code>_config.butterfly.yml</code></p><h2 id="简繁转换"><a href="#简繁转换" class="headerlink" title="简繁转换"></a>简繁转换</h2><p>简体繁体互换</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 默认按钮显示文字(网站是简体，应设置为&#x27;default: 繁&#x27;)</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">简</span></span><br><span class="line">  <span class="comment">#网站默认语言，1: 繁体中文, 2: 简体中文</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment">#延迟时间,若不在前, 要设定延迟翻译时间, 如100表示100ms,默认为0</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment">#当文字是简体时，按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">&quot;繁&quot;</span></span><br><span class="line">  <span class="comment">#当文字是繁体时，按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">&quot;简&quot;</span></span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p> <span class='p green'>简体</span>&gt;：<a href="https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-simp.png">https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-simp.png</a></p><p><span class='p green'>繁体</span>：<a href="https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-tranditional.png">https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-tranditional.png</a> </p></div><h2 id="夜间模式"><a href="#夜间模式" class="headerlink" title="夜间模式"></a>夜间模式</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dark mode</span></span><br><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># dark mode和 light mode切换按钮</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="阅读模式"><a href="#阅读模式" class="headerlink" title="阅读模式"></a>阅读模式</h2><p>阅读模式下会去掉除文章外的内容，避免干扰阅读。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git撤销修改</title>
      <link href="/posts/65a2.html"/>
      <url>/posts/65a2.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git概念"><a href="#Git概念" class="headerlink" title="Git概念"></a>Git概念</h2><p>在说操作之前，先说明下<code>Git</code>的<code>工作区</code>、<code>暂存区</code>和<code>版本库</code>的概念。</p><p>这是<a href="https://www.runoob.com/git/git-workspace-index-repo.html">菜鸟教程</a>的图</p><p><img src="https://pic.daiyu-233.top/img/posts/Git%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9/1.png" alt=""></p><ul><li>工作区：就是在电脑里能看到的目录</li><li>暂存区：英文叫 stage 或 index,一般存放在 <code>.git</code> 目录下的 index 文件<code>(.git/index)</code>中,所以我们把暂存区有时也叫作索引<code>index</code></li><li>版本库：工作区有一个隐藏目录 <code>.git</code>,这个不算工作区,而是 Git 的版本库. </li><li>当对工作区修改(或新增)的文件执行<code>git add</code>命令时,暂存区的目录树被更新,同时工作区修改(或新增)的文件内容被写入到对象库中的     一个新的对象中，而该对象的ID被记录在暂存区的文件索引中.</li><li>当执行提交操作git commit时,暂存区的目录树写到<strong>版本库(对象库)</strong>中,master 分支会做相应的更新. 即 master 指向的目录树就是提交时暂存区的目录树.</li></ul><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p> 撤销修改分为以下几种情况：</p><p>​    1.已经<code>push</code>推送到远程仓库</p><p>​    2.已经<code>commit</code>提交到版本库</p><p>​    3.已经<code>add</code>提交到暂存区</p><p>​    4.暂未提交到暂存区,所有修改都在工作区</p><hr><p>​    1.如果<code>push</code>到<strong>远程仓库</strong>了,并且没有远程仓库的管理权限,那就放弃吧.</p><div class="note success no-icon flat"><ol><li><p>第一步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 版本号 //本地回退到指定的版本</span><br></pre></td></tr></table></figure></li><li><p>第二步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f origin dev //将远程仓库的也回退到指定版本</span><br></pre></td></tr></table></figure></li></ol></div><p>​    2.已经使用<code>commit</code>提交到了<strong>版本库</strong>.</p><div class="note success no-icon flat"><p>因为已经产生了新的提交,所以撤销修改可以使用<code>git reset --hard HEAD^</code>来回退到上一个版本,从而达到撤销修改的效果.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^ //撤销之前的commit，并且舍弃之前的commit修改</span><br><span class="line">git reset --soft HEAD^ //撤销之前的commit，并且保留之前的commit修改</span><br></pre></td></tr></table></figure></div><p>​    3.已经使用<code>add</code>提交到<strong>暂存区</strong>，但是没有使用<code>commit</code>提交到<strong>版本库</strong>.</p><div class="note success no-icon flat"><p>因为已经提交到<strong>暂存区</strong>了,所以撤销修改需要先将提交到<strong>暂存区</strong>的修改拿回到<strong>工作区</strong>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure><p>命令<code>git reset HEAD &lt;file&gt;</code>可以把<strong>暂存区</strong>的修改撤销掉,重新放回<strong>工作区</strong>          注意该命令和回退版本的命令的区别</p><p>这样所有的修改就回到了<strong>工作区</strong>,丢弃<strong>工作区</strong>的修改只需执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;file&gt; //使用 git restore &lt;file&gt; 的效果一样</span><br></pre></td></tr></table></figure><p>命令<code>git checkout -- &lt;file&gt;</code>会将<strong>工作区</strong>的修改撤回到最后一次<code>git add</code>或<code>git commit</code>时的状态.</p></div><p>​    4.文件修改都在<strong>工作区</strong>，没有提交到<strong>暂存区</strong>.</p><div class="note success no-icon flat"><p>丢弃<strong>工作区</strong>的修改只需要执行一下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;file&gt; //使用 git restore &lt;file&gt; 的效果一样</span><br></pre></td></tr></table></figure><p>命令 <code>git checkout -- &lt;file&gt;</code> 会将工作区的修改撤回到最后一次<code>git add</code>或<code>git commit</code>时的状态</p><p>有两种情况：</p><p>一种是<code>file</code>自修改后还没有被放到暂存区,现在撤销修改就回到和版本库一模一样的状态;<br>另一种是<code>file</code>已经添加到暂存区后,又作了修改,现在撤销修改就回到添加到暂存区后的状态.</p></div><h2 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h2><p>文件删除其实也是一个修改动作,当使用<code>rm</code>命令或者通过鼠标右击删除文件时,<strong>工作区</strong>就产生了修改.</p><p>这时候有两种选择：</p><p> 1.确实要从版本库中删除该文件,使用命令<code>git rm &lt;file&gt;</code>然后使用git commit进行提交. 工作区删除文件,后然后使用<code>git add &lt;file&gt;</code>的效果和直接使用<code>git rm &lt;file&gt;</code>的效果是一样的.</p><p> 2.另一种情况是删除错了,这时候只要使用<code>git checkout -- &lt;file&gt;</code>即可把误删的文件恢复到最新版本,最后一次提交后修改的内容会丢失. <strong>从来没有被添加到版本库就被删除的文件,是无法恢复的!</strong></p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minecraft下载</title>
      <link href="/posts/712e.html"/>
      <url>/posts/712e.html</url>
      
        <content type="html"><![CDATA[<div class="tip info"><p><a href="/html/Minecraft版本库.html">点击跳转 Minecraft 版本库</a>    (仅提供资源，不保证页面安全)</p></div><h2 id="网页版"><a href="#网页版" class="headerlink" title="网页版"></a>网页版</h2><h3 id="跳转网页版mc"><a href="#跳转网页版mc" class="headerlink" title="跳转网页版mc"></a><a href="https://daiyu-233.top/html/minecraft.html">跳转网页版mc</a></h3><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="Minecraft正版购买-89CNY"><a href="#Minecraft正版购买-89CNY" class="headerlink" title="Minecraft正版购买-89CNY"></a><a href="https://www.minecraft.net/zh-hans/get-minecraft">Minecraft正版购买</a>-89CNY</h3><h3 id="官方启动器"><a href="#官方启动器" class="headerlink" title="官方启动器"></a><a href="https://www.minecraft.net/zh-hans/store/minecraft-java-bedrock-edition-pc">官方启动器</a></h3><h3 id="网易版"><a href="#网易版" class="headerlink" title="网易版"></a><a href="https://mc.163.com/index.html">网易版</a></h3><h3 id="PCl2启动器"><a href="#PCl2启动器" class="headerlink" title="PCl2启动器"></a><a href="https://afdian.net/p/0164034c016c11ebafcb52540025c377">PCl2启动器</a></h3><h3 id="HMCL启动器"><a href="#HMCL启动器" class="headerlink" title="HMCL启动器"></a><a href="https://hmcl.huangyuhui.net/download/">HMCL启动器</a></h3><h3 id="BakaXL启动器"><a href="#BakaXL启动器" class="headerlink" title="BakaXL启动器"></a><a href="https://www.bakaxl.com/">BakaXL启动器</a></h3><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><h3 id="网易版-1"><a href="#网易版-1" class="headerlink" title="网易版"></a><a href="https://mc.163.com/index.html">网易版</a></h3><h3 id="HMCL-PE-备用-密码-81k2"><a href="#HMCL-PE-备用-密码-81k2" class="headerlink" title="HMCL-PE    |  备用        密码:81k2"></a><a href="http://share.daiyu-233.top:5244/file/HMCL-PE">HMCL-PE</a>    |  <a href="https://wwn.lanzoul.com/izscB0b1hb9a">备用</a>        密码:81k2</h3><h3 id="PojavLauncher-备用-密码-aypq"><a href="#PojavLauncher-备用-密码-aypq" class="headerlink" title="PojavLauncher    |  备用     密码:aypq"></a><a href="http://share.daiyu-233.top:5244/file/PojavLauncher">PojavLauncher</a>    |  <a href="https://wwn.lanzoul.com/izcCc0b1gtcf">备用</a>     密码:aypq</h3><h3 id="国际版"><a href="#国际版" class="headerlink" title="国际版"></a>国际版</h3><details class="folding-tag" yellow><summary> Minecraft-PE国际版全版本下载 (仅提供资源，不保证页面安全) </summary>              <div class='content'>              <iframe src="https://mcapks.com/" width="100%" height="700px"   frameborder="0"  name="myframe" scrolling="yes"></iframe>              </div>            </details><h2 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h2><h3 id="网易版-2"><a href="#网易版-2" class="headerlink" title="网易版"></a><a href="https://mc.163.com/index.html">网易版</a></h3><h3 id="国际版-1"><a href="#国际版-1" class="headerlink" title="国际版"></a>国际版</h3><p>可以参考B站UP@南坪枢纽站Official</p><div align=center class="aspect-ratio">  <iframe src="https://player.bilibili.com/player.html?aid=884762462&bvid=BV1qK4y1871R&cid=241508181&page=1"   scrolling="no"   border="0"   frameborder="no"   framespacing="0"   high_quality=1  danmaku=1   allowfullscreen="true">   </iframe></div>]]></content>
      
      
      <categories>
          
          <category> 资源中心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora+Bilibili免费图床</title>
      <link href="/posts/9bf9.html"/>
      <url>/posts/9bf9.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>​    在使用Typora写完文章时,需要发布到自己的主站(Github等)时,会发现发布之后<strong>照片损坏失效</strong>或<strong>加载速度很慢</strong>.</p><p>​    目前有很多方法可以解决此类问题,普遍是选择上传图片,上传到Github服务器,但这种方法有时候图片加载很慢.同时目前gitee公开的仓库需要审查,很不方便.依照这个思路,找到了一个可以将图片上传到bilibili服务器的方法.所以,该方法免费且快！</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>  <strong>Windows</strong></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>到<a href="https://github.com/xlzy520/typora-plugin-bilibili/releases">GitHub</a>下载插件(<code>main.exe</code>)</p><p><img src="https://pic.daiyu-233.top/img/posts/Typora-Bilibili%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/1.png" alt="1" style="zoom: 67%;" /></p><p>​    将其解压到你指定文件目录底下(<strong>这个文件目录很重要后面会用到,且文件目录中不能含有空格</strong>)我将其放在了 <code>D:\main.exe</code> 之下</p><p>​    网页端打开 <code>bilibili</code> 官网,登录自己的账号之后,然后按 <kbd>F12</kbd>(或者 <kbd>Fn</kbd> + <kbd>F12</kbd> ),进行如下操作,复制 <code>SESSDATA</code> .</p><p><img src="https://pic.daiyu-233.top/img/posts/Typora-Bilibili%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/2.png" alt="2"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>​    打开 <code>Typora</code> 软件,进行如下操作:</p><p><img src="https://pic.daiyu-233.top/img/posts/Typora-Bilibili%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/3.png" alt="3" style="zoom: 67%;" /></p><p>​    将 <code>main.exe</code> 的目录地址 <code>bilibili</code> 网页端拿到的 <code>SESSDATA</code> 码进行组合,格式如下:</p><p>​           <code>main.exe的目录地址</code>+<code>空格</code>+<strong>token=</strong>+<code>bilibili网页端拿到的SESSDATA码</code>        示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\main.exe token=********(这是自己的SESSDATA码)</span><br></pre></td></tr></table></figure><p>​    将组合后的字符串放到 <code>偏好设置\图像\上传服务器设定\自命令</code> 中,如下图所示:</p><p><img src="https://pic.daiyu-233.top/img/posts/Typora-Bilibili%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/4.png" alt="4" style="zoom:67%;" /></p><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>​    完成上述配置步骤后,点击 <code>验证图片上传选项</code> 验证是否配置成功,如下图为配置成功显示内容.</p><p><img src="https://pic.daiyu-233.top/img/posts/Typora-Bilibili%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/5.png" alt="5"></p><h2 id="！！重点-重点！！"><a href="#！！重点-重点！！" class="headerlink" title="！！重点 重点！！"></a><strong>！！重点 重点！！</strong></h2><p>  上述配置完成之后,若发布到自己博客上之后还是无法显示照片时,需要在自己搭建博客的 html页面增加 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-referrer&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  比如我需要在自己博客主题配置文件 <code>_config.butterfly.yml</code> 配置文件中添加代码.</p><p><img src="https://pic.daiyu-233.top/img/posts/Typora-Bilibili%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/6.png" alt="6"></p><p>​    本文主要使用了 <code>Custom Command</code> 方法解决这一问题.除此之外,还可以使用 <code>PicGo(App)</code> 的方法来解决这一问题,此篇博客不再赘述,有需要的小伙伴可自行搜索.</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minecrat开服</title>
      <link href="/posts/b804.html"/>
      <url>/posts/b804.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java服"><a href="#Java服" class="headerlink" title="Java服"></a>Java服</h2><h3 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h3><p>  Minecraft服务器运行需要Java.Minecraft-1.16及以下需要<a href="https://javadl.oracle.com/webapps/download/AutoDL?BundleId=246808_424b9da4b48848379167015dcc250d8d">Java8</a>,Minecraft-1.17及以上需要<a href="https://download.oracle.com/java/17/latest/jdk-17_windows-x64_bin.exe">JDK17</a>.(Minecraft-1.17也可以使用JDK16,但是Minecraft-1.18及以上需要<a href="https://download.oracle.com/java/17/latest/jdk-17_windows-x64_bin.exe">JDK17</a>)                 </p><div class="tip warning"><p>安装Java时不要更改路径</p></div><h3 id="获取服务端"><a href="#获取服务端" class="headerlink" title="获取服务端"></a>获取服务端</h3><p>  服务端是我的世界服务器的核心.好用的服务器核心有很多,这里我用<a href="https://getbukkit.org/download/spigot">Spigot</a>做演示.</p><details class="folding-tag" green><summary> 更多服务端 </summary>              <div class='content'>              <h4 id="Paper"><a href="#Paper" class="headerlink" title="Paper"></a><strong><a href="https://papermc.io/downloads">Paper</a></strong></h4><p>Spigot 的进一步优化版本,在相关算法方面,较 Spigot 有所提高,优化 TPS 等,支持 CraftBukkit 和 Spigot 插件,API 没有太大修改.</p><p>在 1.9 版本之前都带有反作弊功能,1.9 之后的版本需要自行安装其他反作弊插件.但是paper端修复了原版的很多特性(如刷沙机等),另外一些原版的特性默认是关闭的需要在配置文件中开启.</p><h4 id="Mohist"><a href="#Mohist" class="headerlink" title="Mohist"></a><a href="https://mohistmc.com/download/">Mohist</a></h4><p>Mohist 是一个全新的 Minecraft Forge 服务端,但是目前只有少数版本,核心采用 Forge + Paper 结构,开发环境使用 ForgeGradle,支持 Forge mod 和 Paper 系列插件.Mohist 目前稳定性良好,仍在不断更新.</p><p>光下载了 Mohist 核心是不够的,你还需要下载 libraries.zip 文件并解压到服务端同目录.</p><p><strong>libraries:</strong><a href="https://img.zeruns.tech/down/mc_server/mohist/libraries.zip">https://img.zeruns.tech/down/mc_server/mohist/libraries.zip</a></p><h4 id="CatServer"><a href="#CatServer" class="headerlink" title="CatServer"></a><a href="https://github.com/Luohuayu/CatServer/releases">CatServer</a></h4><p>CatServer是Forge+Bukkit+Spigot服务端核心<br>国内最早开发的高版本核心, 支持大部分MOD和插件同时稳定运行</p><h4 id="Minecraft-Server"><a href="#Minecraft-Server" class="headerlink" title="Minecraft Server"></a><a href="https://getbukkit.org/download/vanilla">Minecraft Server</a></h4><p>Minecraft Server 是 Mojang 官方制作的原版服务端,更新非常快,基本上和 Minecraft 客户端版本同时发布,不能安装任何 Mod 和插件,只能够使用原版的命令和物品,适合基友服联机使用.</p><p><strong>官网:<a href="https://www.minecraft.net/en-us/download/server">https://www.minecraft.net/en-us/download/server</a></strong></p><h4 id="Akarin"><a href="#Akarin" class="headerlink" title="Akarin"></a><a href="https://github.com/Akarin-project/Akarin/releases">Akarin</a></h4><p>Akarin 是一款支持多线程的 Minecraft 服务端,来自 “新维度”,前身是 TorchSpigot 服务端.</p><p>作为一个 Paper 的分支, 它支持 Spigot 能使用的几乎所有插件.</p><h4 id="Bedrock-Server"><a href="#Bedrock-Server" class="headerlink" title="Bedrock Server"></a><a href="https://www.minecraft.net/zh-hans/download/server/bedrock">Bedrock Server</a></h4><p>Bedrock 是 Minecraft PE 基岩版,也叫携带版或手机版,Bedrock Server 是 Mojang 官方提供的服务端.</p><p>Bedrock Server 不能安装插件,只能用于纯净游戏联机使用.支持多平台联机.</p><h4 id="BungeeCord"><a href="#BungeeCord" class="headerlink" title="BungeeCord"></a><a href="https://github.com/SpigotMC/BungeeCord/tags">BungeeCord</a></h4><p>BungeeCord 是一个高性能的反向代理服务端,它可以将多个 Minecraft 服务器变成一个 “群组服务器”.</p><p><strong>使用介绍:</strong><a href="http://www.mcbbs.net/thread-424117-1-1.html">http://www.mcbbs.net/thread-424117-1-1.html</a></p><h4 id="CubeRite"><a href="#CubeRite" class="headerlink" title="CubeRite"></a><a href="https://github.com/cuberite/cuberite">CubeRite</a></h4><p>CubeRite 是一个基于 C++ 编写的开源高性能 Minecraft 服务端,支持 1.8 到 1.12.2 版本.</p><p>目前 Cuberite 已经可以做到大部分的基于 Bukkit 架构的 Minecraft 服务端(例如 Spigot)的功能,并且在性能方面具有更大的优势.</p><p><strong>Cuberite_freebsd_amd64:</strong>[<a href="https://url.zeruns.tech/HZG4w">https://url.zeruns.tech/HZG4w</a>]</p><p><strong>Cuberite_linux_amd64:</strong>[<a href="https://url.zeruns.tech/MYUkp">https://url.zeruns.tech/MYUkp</a>]</p><p><strong>Cuberite_linux_raspberry_pi:</strong>[<a href="https://url.zeruns.tech/8sVAP">https://url.zeruns.tech/8sVAP</a>]</p><p><strong>Cuberite_macos_amd64:</strong>[<a href="https://url.zeruns.tech/zKnux">https://url.zeruns.tech/zKnux</a>]</p><p><strong>Cuberite_windows_amd64:</strong>[<a href="https://url.zeruns.tech/NqOa0">https://url.zeruns.tech/NqOa0</a>]</p><p><strong>cuberite_android:</strong>[<a href="https://url.zeruns.tech/cuberite_android">https://url.zeruns.tech/cuberite_android</a>]</p><h4 id="GlowStone"><a href="#GlowStone" class="headerlink" title="GlowStone"></a><a href="https://glowstone.net/#downloads">GlowStone</a></h4><p>GlowStone 萤石是一款开源的 Bukkit 服务端,开发者可以根据自己需求修改或制作一个服务端,内置了 Sponge 支持的插件.</p><h4 id="DragonProxy"><a href="#DragonProxy" class="headerlink" title="DragonProxy"></a><a href="https://github.com/DragonetMC/DragonProxy/releases">DragonProxy</a></h4><p>DragonProxy 龙代理是一个高性能的反向代理服务端,其功能类似于 BungeeCord,但是它的作用是让电脑和手机一起联机！</p><h4 id="Hose"><a href="#Hose" class="headerlink" title="Hose"></a><a href="https://github.com/softpak/HOSE/releases/tag/1.11.2_0515">Hose</a></h4><p>Hose 是一款开源的多线程 Minecraft 服务端,性能更强.</p><h4 id="Nukkit-NukkitX"><a href="#Nukkit-NukkitX" class="headerlink" title="Nukkit/NukkitX"></a><a href="Nukkit/NukkitX">Nukkit/NukkitX</a></h4><p>Nukkit 是一款由 Java 驱动的 Minecraft PE 基岩版服务端,适合开一个多人联机的 PE 版本服务器.</p><p>NukkitX 应该是 Nukkit 的强化 / 后续版本,这是一个高性能的 Minecraft PE 基岩版服务器,由 Java 强力驱动.</p><h4 id="PocketMine-MP"><a href="#PocketMine-MP" class="headerlink" title="PocketMine-MP"></a><a href="https://github.com/pmmp/PocketMine-MP/releases/">PocketMine-MP</a></h4><p>PocketMine-MP 是一个用 PHP 开发的 Minecraft Bedrock 基岩版服务端,也是目前使用最为广泛的服务端之一.</p><p>因为高可扩展性和插件编写起来相对简易,深受广大手机版服主喜爱.</p><h4 id="Spigot"><a href="#Spigot" class="headerlink" title="Spigot"></a><a href="https://getbukkit.org/download/spigot">Spigot</a></h4><p>Spigot 是 CraftBukkit 服务端之后的延续版本,比 CraftBukkit 优化了不少地方,支持 CraftBukkit 的插件,性能比 CraftBukkit 好很多,并且自带反作弊功能</p><h4 id="Sponge-Forge"><a href="#Sponge-Forge" class="headerlink" title="Sponge Forge"></a><a href="https://getbukkit.org/download/spigot-forge">Sponge Forge</a></h4><p>Sponge 是一个全新的服务端,支持 Sponge 的专用插件,可装 Mod,兼容性比 Cauldron 相比提高了不少,适合开 MOD 服,支持的版本非常高,是目前支持 MOD 的服务端里兼容版本最高的服务端.</p><p>但是 Sponge 本身不支持 Bukkit 插件(即使有兼容层,效果也不是很好,只能支持一般的插件),需要服务器的配置比较高,启动速度不佳.</p>              </div>            </details><p>  进入<a href="https://getbukkit.org/download/spigot">Spigot官网</a>,选择最新版本(当前为1.19.2),选择右侧的<strong>Download</strong>按钮,跳转至另一个界面后,点击You’re about to download: <strong>Spigot-1.19.2.jar</strong>下载文件.</p><p><img src="https://pic.daiyu-233.top/img/posts/Minecrat%E5%BC%80%E6%9C%8D/1.png" alt="屏幕截图 2022-08-31 173503" style="zoom: 33%;" /><img src="https://pic.daiyu-233.top/img/posts/Minecrat%E5%BC%80%E6%9C%8D/2.png" alt="屏幕截图 2022-08-31 174702" style="zoom: 33%;" /></p><h3 id="配置服务端"><a href="#配置服务端" class="headerlink" title="配置服务端"></a>配置服务端</h3><p>  首先,我们需要创建一个文件夹,写一个好记的名字,将服务端放入文件夹.</p><p>  之后,创建一个<strong>txt</strong>文档,打开编辑,输入:<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xms2G -Xmx2G -jar spigot-<span class="number">1.19</span><span class="number">.2</span>.jar</span><br></pre></td></tr></table></figure></p><p>  <strong>Xms2G</strong>是指服务器最大内存为2G,<strong>Xmx2G</strong>是指服务器最小内存为2G,<strong>Spigot-1.19.2.jar</strong>需要和服务端文件名保持一致,内存至少2G以上.</p><p>  保存后,将文件名修改为<strong>start</strong>,并在资源管理器-查看-显示文件拓展名中把此选项打开,将文件后缀名修改为<strong>.bat</strong>.</p><p><img src="https://pic.daiyu-233.top/img/posts/Minecrat%E5%BC%80%E6%9C%8D/3.png" alt="屏幕截图 2022-08-31 191046" style="zoom:80%;" /></p><p>  完成后,双击<strong>start.bat</strong>,会弹出一个命令框,如果命令框出现闪退的情况,请检查你的Java.</p><p>  当命令行消失后,文件夹中就会新出现几个文件.<br>  <img src="https://pic.daiyu-233.top/img/posts/Minecrat%E5%BC%80%E6%9C%8D/4.png" alt="屏幕截图 2022-08-31 192111"></p><p>  打开<strong>eula.txt</strong>,里面会有:</p><p><code>#By changing the setting below to TRUE you are indicating your agreement to our EULA (https://aka.ms/MinecraftEULA).</code><br><code>#Wed Aug 31 19:16:49 CST 2022</code><br><code>eula=false</code></p><p>  将最后一行改为eula=<strong>ture</strong>.</p><p>  双击<strong>start.bat</strong>运行服务器,当命令行显示<strong>Done</strong>时服务器就开好了.(命令行可以直接输入指令,输入<strong>stop</strong>可以关闭服务器)</p><p><img src="https://pic.daiyu-233.top/img/posts/Minecrat%E5%BC%80%E6%9C%8D/5.png" alt="屏幕截图 2022-08-31 194805"></p><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><div class="tip info"><p>这里大家如果有公网IP,那可以直接用公网IP连接服务器[如果连接失败可以试试公网IP+服务器端口],就不用再进行内网穿透了</p></div><p>   我推荐<a href="https://www.natfrp.com/?page=register">Sakura Frp</a>的内网穿透,进入网站后,选择注册账号.进入管理面板后,选择上方的穿透选项,选择软件下载,推荐下载启动器.之后默认安装即可.安装完成后,回到管理面板,选择用户-用户信息-重置访问密钥-复制,然后进入启动器,粘贴-登陆即可.</p><p>  在软件内选择新建隧道,然后在左侧列表中找到 <strong>java</strong>,最后选择一个延迟低的节点创建就完成了.如果显示需要实名认证,进入管理面板,选择用户-实名认证,按要求进行实名认证.</p><p><img src="https://pic.daiyu-233.top/img/posts/Minecrat%E5%BC%80%E6%9C%8D/6.png" alt="屏幕截图 2022-08-31 195005" style="zoom: 80%;" /></p><p>  创建成功后,打开隧道的开关,系统会提示开启成功.之后点击日志,复制下图选中的IP,将它发给要进服务器的朋友.</p><p><img src="https://pic.daiyu-233.top/img/posts/Minecrat%E5%BC%80%E6%9C%8D/7.png" alt="屏幕截图 2022-08-31 195133"  /></p><p>  只需启动游戏(游戏版本需要与服务器版本一致),打开多人游戏,输入我们刚刚复制的内容或IP地址就可以进行多人游玩了.</p><p>  如果显示未连接/无法连接到服务器,则需要在服务端的电脑上关闭防火墙,云服务器需要在<strong>入端口</strong>中允许<strong>TCP-25565</strong> (推荐开放所有端口)</p><h2 id="基岩服"><a href="#基岩服" class="headerlink" title="基岩服"></a>基岩服</h2><h3 id="获取服务端-1"><a href="#获取服务端-1" class="headerlink" title="获取服务端"></a>获取服务端</h3><p>  打开<a href="https://www.minecraft.net/zh-hans/download/server/bedrock">minecraft官网</a>,下载<strong>适用于 WINDOWS 的 MINECRAFT 专属服务端软件</strong>.</p><h3 id="配置服务端-1"><a href="#配置服务端-1" class="headerlink" title="配置服务端"></a>配置服务端</h3><p>  将压缩文件解压到空文件夹,通过执行 <strong>bedrock_server.exe</strong> 文件开启服务器.</p><p>  当命令行停止刷新服务器开启成功(命令行可以直接输入指令,输入<strong>stop</strong>可以关闭服务器).</p><h3 id="内网穿透-1"><a href="#内网穿透-1" class="headerlink" title="内网穿透"></a>内网穿透</h3><p>  这里可以参照Java服<a href="#四.内网穿透">内网穿透</a>,但是基岩版的服务器要选择<strong>bedrock_server</strong>.</p><h2 id="互通服-需要Java服务器"><a href="#互通服-需要Java服务器" class="headerlink" title="互通服(需要Java服务器)"></a>互通服(需要Java服务器)</h2><h3 id="获取geyser"><a href="#获取geyser" class="headerlink" title="获取geyser"></a>获取geyser</h3><p>  打开<a href="https://ci.opencollab.dev//job/GeyserMC/job/Geyser/job/master/">geysermc</a>,点击<strong>Geyser.jar</strong>下载geyser独立版.</p><p><img src="https://pic.daiyu-233.top/img/posts/Minecrat%E5%BC%80%E6%9C%8D/8.png" alt="屏幕截图 2022-08-31 204509"></p><h3 id="配置geyser"><a href="#配置geyser" class="headerlink" title="配置geyser"></a>配置geyser</h3><p>  将<strong>Geyser.jar</strong>放到一个空文件夹中,双击<strong>Geyser.jar</strong>运行geyser.</p><p>  接下来会产生一些文件.<img src="https://pic.daiyu-233.top/img/posts/Minecrat%E5%BC%80%E6%9C%8D/9.png" alt="屏幕截图 2022-08-31 205007"></p><p>  用记事本打开<strong>config.yml</strong>,ctrl+F查找<strong>remote</strong>.</p><p>  查找到的结果是这样的:</p><p>  <img src="https://pic.daiyu-233.top/img/posts/Minecrat%E5%BC%80%E6%9C%8D/10.png" alt="屏幕截图 2022-08-31 205502"></p><p>  将 <strong>127.0.0.1</strong> 改成Java服务器的IP,<strong>25565</strong>改成Java服务器的端口(默认是25565),记得保存.</p><h3 id="内网穿透-2"><a href="#内网穿透-2" class="headerlink" title="内网穿透"></a>内网穿透</h3><p>  这里依然可以参照Java服<a href="#四.内网穿透">内网穿透</a>,但是geyser要选择<strong>javaw</strong>.</p><p>  完成后启动基岩版,输入IP就可以进入Java服务器啦.</p><pre><code>        Minecraft开服教程就到这里了,祝大家开服顺利鸭！！！</code></pre>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
